infogo <- read.delim("E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/combined_infogo.tsv", check.names = FALSE, stringsAsFactors = FALSE)
infogo.MN <- infogo[, c(1, which(grepl("MGO", names(infogo))))]
infogo.MN$median <- apply(infogo.MN[,2:19], 1, function(x) median(x))
infogo.MN.sort <- infogo.MN[order(-infogo.MN$median), ]
# Take the first 50% of the sorted data frame
infogo.MN.filtered <- infogo.MN.sort[1:(nrow(infogo.MN.sort)/2),]
# Calculate variance
infogo.MN.filtered$var <- apply(infogo.MN.filtered[,2:19], 1, function(x) var(x))
# Sort the table by variance
infogo.MN.filtered.sort <- infogo.MN.filtered[order(-infogo.MN.filtered$var), ]
# Take data frame without the median and variance columns
lefse.MN <- infogo.MN.filtered.sort[,-which(names(infogo.MN.filtered.sort) %in% c("median", "var"))]
# Change that column name
names(lefse.MN)[1] <- "sample"
# Get a list of sample names
samples <- names(lefse.MN)[-1]
# Specify what group each sample is by the name
groups <- c("group", ifelse(grepl("S1", samples), "caseNPS", "caseMEF"))
# Add this groups row to the data frames
lefse.MN <- rbind(groups, lefse.MN)
# I check this is right
lefse.MN[1,]
lefse.MN[1,]
lefse.MN[1:2,]
# Write out table for lefse
write.table(lefse.MN, "E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/lefse_MN.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
?wilcoxon
?wilcoxon.test
??wilcoxon
?p.adjust
knitr::opts_chunk$set(echo = TRUE)
# Get pathway abundance file filtered by coverage
pathways <- read.delim("E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/combined_pathways_filtered.tsv", stringsAsFactors = FALSE, check.names = FALSE)
pathways[1:5,1:5]
# Subset to cases and controls (CC), and to case MEF and NPS (MN)
pathways.CC <- pathways[, c(1, which(!grepl("F", names(pathways))))]
pathways.MN <- pathways[, c(1, which(grepl("MGO", names(pathways))))]
# Calculate the median abundance in CPM
pathways.CC$median <- apply(pathways.CC[,2:20], 1, function(x) median(x))
pathways.MN$median <- apply(pathways.MN[,2:19], 1, function(x) median(x))
# Sort by median abundance (descending)
pathways.CC.sort <- pathways.CC[order(-pathways.CC$median), ]
# Get pathway abundance file filtered by coverage
pathways <- read.delim("E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/combined_pathways_filtered.tsv", stringsAsFactors = FALSE, check.names = FALSE)
# Subset to cases and controls (CC), and to case MEF and NPS (MN)
pathways.CC <- pathways[, c(1, which(!grepl("F", names(pathways))))]
pathways.MN <- pathways[, c(1, which(grepl("MGO", names(pathways))))]
names(pathways.CC)
# Get pathway abundance file filtered by coverage
pathways <- read.delim("E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/combined_pathways_filtered.tsv", stringsAsFactors = FALSE, check.names = FALSE)
names(pathways)
# Subset to cases and controls (CC), and to case MEF and NPS (MN)
pathways.CC <- pathways[, c(1, which(!grepl("F", names(pathways))))]
names(pathways.CC)
pathways.CC$Pathway
pathways.CC$Pathway.1
# Subset to cases and controls (CC), and to case MEF and NPS (MN)
pathways.CC <- pathways[, which(!grepl("F", names(pathways)))]
pathways.MN <- pathways[, c(1, which(grepl("MGO", names(pathways))))]
names(pathways.CC)
names(pathways.MN)
# Calculate the median abundance in CPM
pathways.CC$median <- apply(pathways.CC[,2:20], 1, function(x) median(x))
pathways.MN$median <- apply(pathways.MN[,2:19], 1, function(x) median(x))
# Sort by median abundance (descending)
pathways.CC.sort <- pathways.CC[order(-pathways.CC$median), ]
pathways.MN.sort <- pathways.MN[order(-pathways.MN$median), ]
library(ggplot2)
# Reorder ensures that it is sorted by descending median, not by row number
ggplot(pathways.CC.sort, aes(x = reorder(Pathway, -median), y = median)) +
geom_bar(stat = "identity")
ggplot(pathways.CC.sort, aes(x = reorder(Pathway, -median), y = median)) +
geom_bar(stat = "identity")
plot(pathways.CC.sort$median)
plot(pathways.CC.sort$median)
pathways.CC.sort$median[40:60]
pathways.CC.sort[10:11,]
pathways.CC.sort[50:51,]
pathways.CC.sort[49:51,]
knitr::opts_chunk$set(echo = TRUE)
# Get pathway abundance file filtered by coverage
pathways <- read.delim("E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/combined_pathways_filtered.tsv", stringsAsFactors = FALSE, check.names = FALSE)
pathways.CC <- pathways[, which(!grepl("F", names(pathways)))]
pathways.MN <- pathways[, c(1, which(grepl("MGO", names(pathways))))]
# Calculate the median abundance in CPM
pathways.CC$median <- apply(pathways.CC[,2:20], 1, function(x) median(x))
pathways.MN$median <- apply(pathways.MN[,2:19], 1, function(x) median(x))
# Sort by median abundance (descending)
pathways.CC.sort <- pathways.CC[order(-pathways.CC$median), ]
pathways.MN.sort <- pathways.MN[order(-pathways.MN$median), ]
plot(pathways.CC.sort$median)
# Subset the top 50 pathways for CC
pathways.CC.filtered <- pathways.CC.sort[1:50,]
# Calculate the variance
pathways.CC.filtered$var <- apply(pathways.CC.filtered[,2:20], 1, function(x) var(x))
# Sort by variance
pathways.CC.filtered.sort <- pathways.CC.filtered[order(-pathways.CC.filtered$var), ]
pathways.CC.filtered.sort$Pathway
library(ggplot2)
ggplot(pathways.MN.sort, aes(x = reorder(Pathway, -median), y = median)) +
geom_bar(stat = "identity")
plot(pathways.MN.sort$median)
pathways.MN.sort$median[40:60]
tail(pathways.CC.filtered)
# Subset the top 49 pathways for CC
pathways.CC.filtered <- pathways.CC.sort[1:49,]
# Calculate the variance
pathways.CC.filtered$var <- apply(pathways.CC.filtered[,2:20], 1, function(x) var(x))
# Sort by variance
pathways.CC.filtered.sort <- pathways.CC.filtered[order(-pathways.CC.filtered$var), ]
# Look at them
pathways.CC.filtered.sort$Pathway
# Chop off at 49 agian
pathways.MN.filtered <- pathways.MN.sort[1:49,]
pathways.MN.sort$median[40:60]
# Calculate variance
pathways.MN.filtered$var <- apply(pathways.CC.filtered[,2:19], 1, function(x) var(x))
# Sort and view
pathways.MN.filtered.sort <- pathways.MN.filtered[order(-pathways.MN.filtered$var), ]
pathways.MN.filtered.sort$Pathway
# Take data frame without the median and variance columns
lefse.pathway.CC <- pathways.CC.filtered.sort[,-which(names(pathways.CC.filtered.sort) %in% c("median", "var"))]
# Change that column name
names(lefse.pathway.CC)[1] <- "sample"
lefse.pathway.MN <- pathways.MN.filtered.sort[,-which(names(pathways.MN.filtered.sort) %in% c("median", "var"))]
names(lefse.pathway.MN)[1] <- "sample"
# Get a list of sample names
samples.CC <- names(lefse.CC)[-1]
# Get a list of sample names
samples.CC <- names(lefse.pathway.CC)[-1]
samples.MN <- names(lefse.pathway.MN)[-1]
# Specify what group each sample is by the name
groups.CC <- c("group", ifelse(grepl("MGO", samples), "caseNPS", "controlNPS"))
groups.MN <- c("group", ifelse(grepl("S1", samples.MN), "caseNPS", "caseMEF"))
# Specify what group each sample is by the name
groups.CC <- c("group", ifelse(grepl("MGO", samples.CC), "caseNPS", "controlNPS"))
# Add this groups row to the data frames
lefse.pathway.CC <- rbind(groups.CC, lefse.pathway.CC)
lefse.pathway.MN <- rbind(groups.MN, lefse.pathway.MN)
# I check this is right
lefse.pathway.CC[1,]
lefse.pathway.MN[1,]
lefse.pathway.CC[1,]
lefse.pathway.CC[1;2,]
lefse.pathway.CC[1:2,]
lefse.pathway.CC[1,]
lefse.pathway.MN[1,]
# Write out tables for lefse
write.table(lefse.pathway.CC, "E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/lefse_pathway_CC.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
write.table(lefse.pathway.MN, "E:/PhD/WGS/Analysis/humann2_files_lefse/cpm/lefse_pathway_MN.tsv", sep = "\t", row.names = FALSE, quote = FALSE)
head(pathways.CC.filtered)
head(pathways.MN.filtered)
?var
apply(pathways.CC.filtered[,2:19], 1, function(x) sd(x))
apply(pathways.CC.filtered[,2:19], 1, function(x) var(x))
test <- pathways.CC.filtered$var[1]
test <- pathways.CC.filtered[1,]
test <- as.numeric(pathways.CC.filtered[1,])
test <- test[-1]
var(test)
test <- test[-c(20,21)]
var(test)
?wilcox.test
sessionInfo()
??superheat
??ggplot
??grid.arrange
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "E:/PhD/WGS/Analysis/tax_barcharts")
# Read in the OTU table summarised at genus level for all samples
# When you were making heatmaps you put the file here
abundance.16S <- read.table("../tax_heatmaps/final_otu_table_all_L6.txt", header = TRUE, stringsAsFactors = FALSE, sep = "\t", check.names = FALSE)
# Subset to the samples that were shotgun sequenced, these are in a text file from the heatmaps
# Again path left over from trying heatmaps
samples <- scan("../tax_heatmaps/shotgun_samples.txt", what = "character")
# Add "OTU_ID" to keep this column when you subset in the next step
samples <- append(samples, "OTU_ID")
# Subset OTU table to appropriate samples
abundance.16S <- abundance.16S[,which(names(abundance.16S) %in% samples)]
# There are two samples we've decided to exclude, remove these
abundance.16S$MGO072FL <- NULL
abundance.16S$MGO095S1 <- NULL
# Turn taxonomy into genus name only
abundance.16S$OTU_ID <- gsub("^.*\\D5__", "", abundance.16S$OTU_ID)
# Let's have percentages
abundance.16S[,2:29] <- abundance.16S[,2:29] * 100
# Make a new data frame for average relative abundances
abundance.16S.groups <- data.frame(abundance.16S$OTU_ID)
names(abundance.16S.groups) <- "OTU_ID"
# Get mean relative abundances for controls
controls <- abundance.16S[, which(!grepl("MGO", names(abundance.16S)))]
abundance.16S.groups$controls <- rowMeans(controls[2:11])
# For case NPS
caseNPS <- abundance.16S[, which(grepl("S1", names(abundance.16S)))]
caseNPS$OTU_ID <- abundance.16S$OTU_ID
caseNPS <- caseNPS[, c(10, 1:9)]
abundance.16S.groups$caseNPS <- rowMeans(caseNPS[2:10])
# For MEFs
MEF <- abundance.16S[, which(grepl("F", names(abundance.16S)))]
MEF$OTU_ID <- abundance.16S$OTU_ID
MEF <- MEF[, c(10, 1:9)]
abundance.16S.groups$MEF <- rowMeans(MEF[2:10])
# Find taxa with an average relative abundance of below 5% in every group
smalls.16S <- rownames(abundance.16S.groups[apply(abundance.16S.groups[,-1], MARGIN = 1, function(x) all(x < 5)), ])
# Rename them as "Other bacteria" - this leaves 9 genera for the legend
abundance.16S.groups$OTU_ID <- ifelse(rownames(abundance.16S.groups) %in% smalls.16S, "Other bacteria", as.character(abundance.16S.groups$OTU_ID))
# Collapse them into one row:
# Take the sum of all these small taxa for each group
other.16S <- abundance.16S.groups[which(abundance.16S.groups$OTU_ID == "Other bacteria"),]
other.16S <- colSums(other.16S[2:4])
# Remove the individual OTUs from the table
abundance.16S.groups <- abundance.16S.groups[-which(abundance.16S.groups$OTU_ID == "Other bacteria"),]
# Create new first column for the collapsed row
other.16S <- append(other.16S, "Other bacteria")
names(other.16S)[4] <- "OTU_ID"
other.16S <- other.16S[c(4,1:3)]
# Add this row to the table
abundance.16S.groups <- rbind(abundance.16S.groups, other.16S)
# Make all numeric
abundance.16S.groups[2:4] <- lapply(abundance.16S.groups[2:4], function (x) as.numeric(x))
# Rename Corynebacterium 1 to Corynebacterium to fit with MetaPhlAn2
abundance.16S.groups$OTU_ID <- gsub("Corynebacterium 1", "Corynebacterium", abundance.16S.groups$OTU_ID)
# Read in the whole table of MetaPhlAn2 profiling results
# This is the new merged abundance table from FINALFINAL version (Dec 2017)
metaphlan.full <- read.table("merged_abundance_table.txt", sep = "\t", header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
# First, cut out anything that doesn't have a genus name in it unless it contains "unclassified"
metaphlan.genus <- metaphlan.full[which(grepl("g__", metaphlan.full$ID)|grepl("unclassified", metaphlan.full$ID)),]
# Then cut out anything with a species designation
metaphlan.genus <- metaphlan.genus[which(!grepl("s__", metaphlan.genus$ID)),]
# Check with colSums that you've got all the taxa that make up the sample
colSums(metaphlan.genus[2:29])
# Now you have all the taxa at genus level.
# Rename all viruses to "Virus" as this is how they will be displayed in the figure
metaphlan.genus$ID <- ifelse(grepl("^k__Virus", metaphlan.genus$ID), "Viruses", metaphlan.genus$ID)
# Collapse all the viruses for each sample as you would for "Other"
# Take the sum of the viruses for each sample
virus.metaphlan.genus <- metaphlan.genus[which(metaphlan.genus$ID == "Viruses"),]
virus.metaphlan.genus <- colSums(virus.metaphlan.genus[2:29])
# Remove the individual entries from the table
metaphlan.genus <- metaphlan.genus[-which(metaphlan.genus$ID == "Viruses"),]
# Create new first column for the collapsed row
virus.metaphlan.genus <- append(virus.metaphlan.genus, "Viruses")
names(virus.metaphlan.genus)[29] <- "ID"
virus.metaphlan.genus <- virus.metaphlan.genus[c(29,1:28)]
# Add this row to the table
metaphlan.genus <- rbind(metaphlan.genus, virus.metaphlan.genus)
# Make all numeric
metaphlan.genus[2:29] <- lapply(metaphlan.genus[2:29], function (x) as.numeric(x))
# Make the bacterial taxon names nicer
metaphlan.genus$ID <- gsub(".*g__", "", metaphlan.genus$ID)
# Change the headers to just the sample ID
names(metaphlan.genus) <- gsub("_profile", "", names(metaphlan.genus))
# Make a new data frame for average relative abundances
metaphlan.genus.groups <- data.frame(metaphlan.genus$ID)
names(metaphlan.genus.groups) <- "ID"
# Get the mean relative abundances for controls
controls.genus <- metaphlan.genus[, which(!grepl("MGO", names(metaphlan.genus)))]
metaphlan.genus.groups$controls <- rowMeans(controls.genus[2:11])
# For case NPS
caseNPS.genus <- metaphlan.genus[, which(grepl("S1", names(metaphlan.genus)))]
caseNPS.genus$ID <- metaphlan.genus$ID
caseNPS.genus <- caseNPS.genus[, c(10, 1:9)]
metaphlan.genus.groups$caseNPS <- rowMeans(caseNPS.genus[2:10])
# For MEFs
MEF.genus <- metaphlan.genus[, which(grepl("F", names(metaphlan.genus)))]
MEF.genus$ID <- metaphlan.genus$ID
MEF.genus <- MEF.genus[, c(10, 1:9)]
metaphlan.genus.groups$MEF <- rowMeans(MEF.genus[2:10])
# Find taxa with an average relative abundance of below 5% in every group
smalls.metaphlan.genus <- rownames(metaphlan.genus.groups[apply(metaphlan.genus.groups[,-1], MARGIN = 1, function(x) all(x < 5)), ])
# Rename them as "Other bacteria"
metaphlan.genus.groups$ID <- ifelse(rownames(metaphlan.genus.groups) %in% smalls.metaphlan.genus, "Other bacteria", as.character(metaphlan.genus.groups$ID))
# Collapse them into one row:
# Take the sum of all these small taxa for each group
other.metaphlan.genus <- metaphlan.genus.groups[which(metaphlan.genus.groups$ID == "Other bacteria"),]
other.metaphlan.genus <- colSums(other.metaphlan.genus[2:4])
# Count the number of OTUs in "Other"
sum(metaphlan.genus.groups == "Other bacteria")
# Remove the individual OTUs from the table
metaphlan.genus.groups <- metaphlan.genus.groups[-which(metaphlan.genus.groups$ID == "Other bacteria"),]
# Create new first column for the collapsed row
other.metaphlan.genus <- append(other.metaphlan.genus, "Other bacteria")
names(other.metaphlan.genus)[4] <- "ID"
other.metaphlan.genus <- other.metaphlan.genus[c(4,1:3)]
# Add this row to the table
metaphlan.genus.groups <- rbind(metaphlan.genus.groups, other.metaphlan.genus)
# Make all numeric
metaphlan.genus.groups[2:4] <- lapply(metaphlan.genus.groups[2:4], function (x) as.numeric(x))
# First, cut out anything that doesn't have a species name in it unless it contains "unclassified"
metaphlan.species <- metaphlan.full[which(grepl("s__", metaphlan.full$ID)|grepl("unclassified", metaphlan.full$ID)),]
# Then cut out anything with a strain designation
metaphlan.species <- metaphlan.species[which(!grepl("t__", metaphlan.species$ID)),]
# Check with colSums that you've got all the taxa that make up the sample
colSums(metaphlan.species[2:29])
# Collape the viruses as you did for the genus level data
# If it's a virus, just call it virus
metaphlan.species$ID <- ifelse(grepl("^k__Virus", metaphlan.species$ID), "Viruses", metaphlan.species$ID)
# Collapse all the viruses for each sample
# Take the sum of the viruses for each sample
virus.metaphlan.species <- metaphlan.species[which(metaphlan.species$ID == "Viruses"),]
virus.metaphlan.species <- colSums(virus.metaphlan.species[2:29])
# Remove the individual entries from the table
metaphlan.species <- metaphlan.species[-which(metaphlan.species$ID == "Viruses"),]
# Create new first column for the collapsed row
virus.metaphlan.species <- append(virus.metaphlan.species, "Viruses")
names(virus.metaphlan.species)[29] <- "ID"
virus.metaphlan.species <- virus.metaphlan.species[c(29,1:28)]
# Add this row to the table
metaphlan.species <- rbind(metaphlan.species, virus.metaphlan.species)
# Make all numeric
metaphlan.species[2:29] <- lapply(metaphlan.species[2:29], function (x) as.numeric(x))
# Make the bacterial taxon names nicer
metaphlan.species$ID <- gsub(".*s__", "", metaphlan.species$ID)
# There are three taxa that are only classified higher than species, so get the genus name (they are family_unclassified)
metaphlan.species$ID <- gsub(".*g__", "", metaphlan.species$ID)
# Change the headers to just the sample ID
names(metaphlan.species) <- gsub("_profile", "", names(metaphlan.species))
# Make a new data frame for average relative abundances
metaphlan.species.groups <- data.frame(metaphlan.species$ID)
names(metaphlan.species.groups) <- "ID"
# Get mean relative abundances for controls
controls.species <- metaphlan.species[, which(!grepl("MGO", names(metaphlan.species)))]
metaphlan.species.groups$controls <- rowMeans(controls.species[2:11])
# For case NPS
caseNPS.species <- metaphlan.species[, which(grepl("S1", names(metaphlan.species)))]
caseNPS.species$ID <- metaphlan.species$ID
caseNPS.species <- caseNPS.species[, c(10, 1:9)]
metaphlan.species.groups$caseNPS <- rowMeans(caseNPS.species[2:10])
# For MEFs
MEF.species <- metaphlan.species[, which(grepl("F", names(metaphlan.species)))]
MEF.species$ID <- metaphlan.species$ID
MEF.species <- MEF.species[, c(10, 1:9)]
metaphlan.species.groups$MEF <- rowMeans(MEF.species[2:10])
# Specify the genus for each row
metaphlan.species.groups$genus <- gsub("_.*", "", metaphlan.species.groups$ID)
# If the row's genus name goes not match a genus in the trimmed metaphlan.genus.groups data frame, call it "Other bacteria"
metaphlan.species.groups$ID <- ifelse(metaphlan.species.groups$genus %in% metaphlan.genus.groups$ID, as.character(metaphlan.species.groups$ID), "Other bacteria")
# Take the sum of "Other" and add it as a row
other.metaphlan.species <- metaphlan.species.groups[which(metaphlan.species.groups$ID == "Other bacteria"), ]
other.metaphlan.species <- colSums(other.metaphlan.species[2:4])
# Remove the individual rows from the table
metaphlan.species.groups <- metaphlan.species.groups[-which(metaphlan.species.groups$ID == "Other bacteria"), ]
# Create new first column for the collapsed row
other.metaphlan.species <- append(other.metaphlan.species, "Other bacteria")
names(other.metaphlan.species)[4] <- "ID"
other.metaphlan.species <- other.metaphlan.species[c(4, 1:3)]
# Add the row to the table
metaphlan.species.groups <- rbind(metaphlan.species.groups, other.metaphlan.species)
# Make all numeric
metaphlan.species.groups[2:4] <- lapply(metaphlan.species.groups[2:4], function (x) as.numeric(x))
# Change the sample type names so they're unique
names(abundance.16S.groups) <- c("taxa", "control16S", "case16S", "mef16S")
names(metaphlan.genus.groups) <- c("taxa", "controlG", "caseG", "mefG")
names(metaphlan.species.groups) <- c("taxa", "controlS", "caseS", "mefS", "genus")
# Combine all three datasets, keeping all taxa
combined.abundance <- merge(abundance.16S.groups, metaphlan.genus.groups, all.x = TRUE, all.y = TRUE)
combined.abundance <- merge(combined.abundance, metaphlan.species.groups, all.x = TRUE, all.y = TRUE)
# Turn all the NA into 0s
combined.abundance[is.na(combined.abundance)] <- 0
# Melt the data
library(reshape2)
melt.combined <- melt(combined.abundance)
# For the two data frames that didn't have the genus column, make it equal to taxa
melt.combined$genus <- ifelse(melt.combined$genus == 0, melt.combined$taxa, melt.combined$genus)
# Specify order of bars (horizontal bar charts go bottom up)
melt.combined$variable <- factor(melt.combined$variable, levels = c("mefS", "mefG", "mef16S", "caseS", "caseG", "case16S", "controlS", "controlG", "control16S"))
# Turn others to facors
melt.combined$taxa <- as.factor(melt.combined$taxa)
melt.combined$genus <- as.factor(melt.combined$genus)
# Specify the order of genera in the legend - this is the order I want them displayed in
melt.combined$genus <- factor(melt.combined$genus, levels = c("Dolosigranulum", "Corynebacterium", "Moraxella", "Haemophilus", "Alloiococcus", "Neisseria", "Turicella", "Streptococcus", "Staphylococcus", "Gemella", "Viruses", "Other bacteria"))
# Select the colours for the chart (12 are required)
#cols <- c("Dolosigranulum" = "#332288", "Corynebacterium" = "#88CCEE", "Moraxella" = "#44AA99", "Haemophilus" = "#117733", "Alloiococcus" = "#DDCC77", "Neisseria" = "#CC6688", "Turicella" = "purple", "Streptococcus" = "darkseagreen", "Staphylococcus" = "coral", "Gemella" = "firebrick", "Viruses" = "red", "Other bacteria" = "black")
# Get the ggplot colours - those equidistant around the colour wheel - and randomise them
#library(scales)
#cols <- hue_pal(h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, direction = 1)(10)[order(sample(1:10, 10))]
#cols <-append(cols, c("red", "black"))
# Some ggplot colours
#cols <- c("#00B0F6", "#D89000", "#FF62BC", "#00BF7D", "#9590FF", "#39B600", "#A3A500", "#E76BF3", "#F8766D", "#00BFC4", "red", "black")
# Some dark colours
#cols <- c("#000099", "#CC6633", "#CC3366", "#339966", "#9933FF", "#39B600", "#660000", "#660066", "#F8766D", "#9999CC", "red", "black")
# Spectral colours
#cols <- brewer.pal(n = 10, name = "Spectral")
#cols <- append(cols, c("red", "black"))
# Set 3 colours
#cols <- brewer.pal(n = 10, name = "Set3")
#cols <- append(cols, c("red", "black"))
# Paul Tol https://www.r-bloggers.com/the-paul-tol-21-color-salute/
#cols <- c("#332288", "#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#661100", "#CC6677", "#882255", "#AA4499", "red", "black")
# Paired, but excluding the reds and reordered so dark comes first
library(RColorBrewer)
cols <- brewer.pal(n = 12, name = "Paired")
cols <- append(cols, c("red", "black"))
cols <- cols[-c(5, 6)]
cols <- cols[c(2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 11, 12)]
# Create the plot with genera as fill
library(ggplot2)
ggplot(melt.combined, aes(x = variable, y = value)) +
# It's a bar plot, where the fill is the genera
# Stacks need to be reversed so they go left to right with legend
geom_bar(aes(fill = genus), stat = "identity", position = position_stack(reverse = TRUE)) +
# Insert x and y labels
labs(x = "Sample type", y = "Relative abundance (%)") +
# Make it a horizontal bar plot
coord_flip() +
# Place the legend at the top
theme(legend.position = "top") +
# Specify the colours
scale_fill_manual(values = cols)
# Same plot but with an outline around the stacks
ggplot(melt.combined, aes(x = variable, y = value)) +
# It's a bar plot, where the fill is the genera
# Stacks need to be reversed so they go left to right with legend
geom_bar(aes(fill = genus), colour = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
# Insert x and y labels
labs(x = "Sample type", y = "Relative abundance (%)") +
# Make it a horizontal bar plot
coord_flip() +
# Place the legend at the top
theme(legend.position = "top") +
# Specify the colours
scale_fill_manual(values = cols)
# The above plot with no legend
ggplot(melt.combined, aes(x = variable, y = value)) +
geom_bar(aes(fill = genus), stat = "identity", position = position_stack(reverse = TRUE)) +
labs(x = "Sample type", y = "Relative abundance (%)") +
coord_flip() +
theme(legend.position = "top") +
scale_fill_manual(values = cols) +
theme(legend.position = "none")
# Order all taxa in the same genus order as the previous plot
taxa <- levels(melt.combined$taxa)
melt.combined$taxa <- factor(melt.combined$taxa, levels = taxa[c(8, 9, 3:7, 18, 19, 11:17, 1, 2, 20:30, 45, 46, 33:44, 32, 10, 47, 31)])
# Show genus colours
cols
# Show genera in order
levels(melt.combined$genus)
# Show species in order
levels(melt.combined$taxa)
# Colour the taxa by genus (by looking at how many times in a row the colour needs to appear to fit the species legend, bit of a mess but it works)
species.cols <- c("#1F78B4", "#1F78B4", "#A6CEE3", "#A6CEE3", "#A6CEE3", "#A6CEE3", "#A6CEE3", "#33A02C", "#33A02C", "#B2DF8A", "#B2DF8A", "#B2DF8A", "#B2DF8A", "#B2DF8A", "#B2DF8A", "#B2DF8A", "#FF7F00", "#FF7F00", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#FDBF6F", "#6A3D9A", "#6A3D9A", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#CAB2D6", "#B15928", "#FFFF99", "red", "black")
# Create the plot with all taxa as fill
ggplot(melt.combined, aes(x = variable, y = value)) +
geom_bar(aes(fill = taxa), color = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
labs(x = "Sample type", y = "Relative abundance (%)") +
coord_flip() +
theme(legend.position = "top") +
# Specify those messed up colours
scale_fill_manual(values = species.cols)
# Species plot with no legend
ggplot(melt.combined, aes(x = variable, y = value)) +
geom_bar(aes(fill = taxa), colour = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
labs(x = "Sample type", y = "Relative abundance (%)") +
coord_flip() +
theme(legend.position = "none") +
scale_fill_manual(values = species.cols)
# I look at the abundance of the species in the species data frame
metaphlan.species.groups
# For each genus, I decide the order that the species should be in (manually, on paper)
# I reorder the taxa factor
taxa <- levels(melt.combined$taxa)
melt.combined$taxa <- factor(melt.combined$taxa, levels = taxa[c(1:3, 7, 6, 4, 5, 8:10, 13, 11, 15, 12, 16, 14, 17:19, 23, 29, 21, 25, 28, 22, 27, 26, 20, 24, 30:32, 36, 41, 40, 39, 37, 33:35, 38, 42:47)])
# Plot that genus plot again
ggplot(melt.combined, aes(x = variable, y = value)) +
# It's a bar plot, where the fill is the genera
# Stacks need to be reversed so they go left to right with legend
geom_bar(aes(fill = genus), colour = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
# Insert x and y labels
labs(x = "Sample type", y = "Relative abundance (%)") +
# Make it a horizontal bar plot
coord_flip() +
# Place the legend at the top
theme(legend.position = "top") +
# Specify the colours
scale_fill_manual(values = cols)
# Species plot with no legend
ggplot(melt.combined, aes(x = variable, y = value)) +
geom_bar(aes(fill = taxa), colour = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
labs(x = "Sample type", y = "Relative abundance (%)") +
coord_flip() +
theme(legend.position = "none") +
scale_fill_manual(values = species.cols)
# Species plot with legend
ggplot(melt.combined, aes(x = variable, y = value)) +
geom_bar(aes(fill = taxa), colour = "black", stat = "identity", position = position_stack(reverse = TRUE)) +
labs(x = "Sample type", y = "Relative abundance (%)") +
coord_flip() +
theme(legend.position = "top") +
scale_fill_manual(values = species.cols)
metaphlan.genus.groups[metaphlan.genus.groups$taxa == "Gemella",]
metaphlan.genus.groups[metaphlan.genus$taxa == "Gemella",]
metaphlan.genus.groups[metaphlan.genus$ID == "Gemella",]
metaphlan.genus$ID
metaphlan.genus[metaphlan.genus$ID == "Gemella",]
abundance.16S[abundance.16S$OTU_ID == "Gemella"]
abundance.16S[abundance.16S$OTU_ID == "Gemella",]
metaphlan.genus[metaphlan.genus$ID == "Gemella",]
metaphlan.species[grep("Gemella", metaphlan.species$ID,]
metaphlan.species[grep("Gemella", metaphlan.species$ID),]
metaphlan.species[grep("Neisseria", metaphlan.species$ID),]
metaphlan.species.groups[grep("Neisseria", metaphlan.species.groups$taxa),]
metaphlan.species[grep("Neisseria", metaphlan.species$ID),]
abundance.16S.groups[abundance.16S.groups$taxa == "Staphylococcus"]
abundance.16S.groups[abundance.16S.groups$taxa == "Staphylococcus",]
metaphlan.species[grep("Staphylococcus", metaphlan.species$ID),]
metaphlan.species[grep("Alloiococcus", metaphlan.species$ID),]
metaphlan.species[grep("Turicella", metaphlan.species$ID),]
metaphlan.species[grep("Moraxella", metaphlan.species$ID),]
metaphlan.species[grep("virus", metaphlan.species$ID),]
metaphlan.species[grep("Virus", metaphlan.species$ID),]
setwd("E:/PhD/ordeal_of_time/")
setwd("E:/PhD/ordeal_of_time/_posts")
